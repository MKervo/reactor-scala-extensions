group 'com.github.sinwe'
description = 'Scala wrapper for reactor-core'

apply plugin: 'scala'
apply plugin: "com.github.maiflai.scalatest"
apply plugin: 'signing'
apply plugin: 'maven'
apply plugin: 'org.scoverage'
apply plugin: 'com.updateimpact.updateimpact'
apply plugin: 'net.researchgate.release'

repositories {
    mavenCentral()
}

ext {
    reactorVersion = "3.0.4.RELEASE"
    baseScalaVersion = "2.11"
}

dependencies {
// scala dependencies
    compile "org.scala-lang:scala-library:$baseScalaVersion.8"
// reactor dependencies
    compile group: 'io.projectreactor', name: 'reactor-core', version: "$reactorVersion"
// jsr305
    compile group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.1'

//    test dependencies
    testCompile "org.scalatest:scalatest_$baseScalaVersion:3.0.1"
    testRuntime "org.pegdown:pegdown:1.6.0"
    testCompile group: 'io.projectreactor.addons', name: 'reactor-test', version: "$reactorVersion"

    scoverage "org.scoverage:scalac-scoverage-plugin_$baseScalaVersion:1.1.0", "org.scoverage:scalac-scoverage-runtime_$baseScalaVersion:1.1.0"
}

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath "gradle.plugin.com.github.maiflai:gradle-scalatest:0.14"
        classpath "gradle.plugin.org.scoverage:gradle-scoverage:2.1.0"
        classpath 'com.updateimpact:updateimpact-gradle-plugin:1.1.6'
	classpath 'net.researchgate:gradle-release:2.5.0'
    }
}

ext.uiApiKey = hasProperty("updateimpactApiKey") ? updateimpactApiKey : System.getenv("updateimpactApiKey")

updateImpactSubmit {
    apiKey = uiApiKey
    openBrowser = false
}

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")
signing {
    required { isReleaseVersion && gradle.taskGraph.hasTask("publish")}
    sign configurations.archives
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives jar
    archives sourcesJar
}

ext.sonatypeUsername = hasProperty("ossrhUsername") ? ossrhUsername : System.getenv("ossrhUsername")

ext.sonatypePassword = hasProperty("ossrhPassword") ? ossrhPassword : System.getenv("ossrhPassword")

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2") {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }
            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }
        }
    }
}

ScalaCompileOptions.metaClass.daemonServer = true
ScalaCompileOptions.metaClass.fork = true
ScalaCompileOptions.metaClass.useAnt = false
ScalaCompileOptions.metaClass.useCompileDaemon = false
